# -*- coding: utf-8 -*-
"""Organic_Recyclable.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A0BfNU9a6zDJ2BKFCHeZNH9Nxc7TDaya
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam

#Used to Load Content from My Drive If you are directly upload content dataset skip this
from google.colab import drive
drive.mount('/content/drive')

import zipfile

with zipfile.ZipFile('/content/drive/MyDrive/DATASET.zip', 'r') as zip_ref:
    zip_ref.extractall('/content/DATA')

# Paths to dataset folders
TRAIN_DIR = '/content/DATA/DATASET/TRAIN'
TEST_DIR = '/content/DATA/DATASET/TEST'

# Image size and batch size
IMG_SIZE = (128, 128)  # Resize all images to 128x128
BATCH_SIZE = 32


train_datagen = ImageDataGenerator(rescale=1.0 / 255.0)
test_datagen = ImageDataGenerator(rescale=1.0 / 255.0)

train_generator = train_datagen.flow_from_directory(
    TRAIN_DIR,
    target_size=(128,128),
    batch_size=32,
    class_mode='binary'   # keep categorical for multiclassification
)

test_generator = test_datagen.flow_from_directory(
    TEST_DIR,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary'  #keep categorical for multiclassification
)

def build_model():
    model = Sequential([
        Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
        MaxPooling2D(pool_size=(2, 2)),

        Conv2D(64, (3, 3), activation='relu'),
        MaxPooling2D(pool_size=(2, 2)),

        Conv2D(128, (3, 3), activation='relu'),
        MaxPooling2D(pool_size=(2, 2)),

        Flatten(),
        Dense(128, activation='relu'),
        Dropout(0.5),
        Dense(1, activation='sigmoid')  # softmax for multi classification
    ])

    model.compile(optimizer=Adam(),
                  loss='binary_crossentropy',  #sparse_categorical_crossentropy for multiclassification
                  metrics=['accuracy'])
    return model


model = build_model()
model.summary()

#Training the Model

history = model.fit(
    train_generator,
    epochs=10,
    validation_data=test_generator
)

# 4. Evaluate the Model on Test Data
test_loss, test_acc = model.evaluate(test_generator)
print(f"Test Accuracy: {test_acc}")

# Saving model
model.save('/content/drive/MyDrive/organic_vs_recycle_model.h5')

#Manual Testing of model
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import warnings
warnings.filterwarnings('ignore')

# Load the trained model
model = load_model('/content/drive/MyDrive/organic_vs_recycle_model.h5')

# Path to your custom image
image_path = r"/content/R_4.jpg" # Replace with your image path

# Preprocess the image
IMG_SIZE = (128, 128)  # Must match the size used during training
def preprocess_image(image_path):
    img = load_img(image_path, target_size=(128,128))  # Load and resize image
    img_array = img_to_array(img)  # Convert image to array
    img_array = img_array / 255.0  # Rescale to 0-1 range
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
    return img_array
#Author: KARAN KATAKDHOND
image = preprocess_image(image_path)

# Make prediction
prediction = model.predict(image)
print("prediction prob" , prediction)
# Interpretation
if prediction[0][0] < 0.5:
    print(f"The image is predicted to be: Organic)")
else:
    print(f"The image is predicted to be: Recyclable")